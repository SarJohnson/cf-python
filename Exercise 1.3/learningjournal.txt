Exercise 1.2: Operators & Functions in Python
Reflection Questions

1.  In this Exercise, you learned how to use if-elif-else statements to run different tasks based on conditions that you define. 
    Now practice that skill by writing a script for a simple travel app using an if-elif-else statement for the following situation: 
    The script should ask the user where they want to travel. 
    The user’s input should be checked for 3 different travel destinations that you define. 
    If the user’s input is one of those 3 destinations, the following statement should be printed: “Enjoy your stay in ______!”
    If the user’s input is something other than the defined destinations, the following statement should be printed: “Oops, that destination is not currently available.”
	Write your script here. (Hint: remember what you learned about indents!)
    user_destination = input("Where do you want to travel? ")
    travel_app(user_destination)
    def travel_app(destination):
        destinations = ['Paris', 'Tokyo', 'New York']
        if destination in destinations:
            print(f"Enjoy your stay in {destination}!")
        else:
            print("Oops, that destination is not currently available.")

2.	Imagine you’re at a job interview for a Python developer role. The interviewer says “Explain logical operators in Python”. 
    Draft how you would respond.
    I would respond how logical operators in Python, namely 'and', 'or', and 'not', are crucial for making decisions in code. 
    The 'and' operator returns True only if both operands are true, 'or' returns True if at least one operand is true, and 'not' negates the operand's truth value. 
    These operators are frequently used in conditional statements and loops, allowing developers to create effective decision-making structures in their Python programs.

3.	What are functions in Python? When and why are they useful?
    In Python, functions are reusable blocks of code that perform specific tasks. 
    They are defined using the 'def' keyword, enabling code organization, reusability, and abstraction. 
    Functions are useful when you want to encapsulate a set of actions, promote modular programming for easier maintenance, parameterize behavior for adaptability, and return values to produce results that can be used elsewhere in the code. 
    They enhance code readability and help break down complex programs into more manageable and understandable components.

4.	In the section for Exercise 1 in this Learning Journal, you were asked in question 3 to set some goals for yourself while you complete this course.  
    In preparation for your next mentor call, make some notes on how you’ve progressed towards your goals so far.
    I have a basic understanding of some of Python's fundamental concepts. I am ready to continue to develop my understanding in the concepts to be able to create a recipe app.